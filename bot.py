import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from firestore_db import save_note, get_notes, delete_note
from config import BOT_TOKEN


logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_states = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞")],
        [KeyboardButton(text="üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")],
        [KeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")]
    ],
    resize_keyboard=True
)

cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_action(message: types.Message):
    user_states.pop(message.from_user.id, None)
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)

def create_notes_keyboard(notes, action):
    keyboard = InlineKeyboardBuilder()
    for title in notes.keys():
        callback_data = f"{action}:{title}"
        keyboard.button(text=title, callback_data=callback_data)
    keyboard.adjust(1)
    return keyboard.as_markup()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ ---
@dp.message(F.text == "üìù –ù–æ–≤–∞ –Ω–æ—Ç–∞—Ç–∫–∞")
async def new_note_step1(message: types.Message):
    user_states[message.from_user.id] = {"state": "awaiting_title"}
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ—Ç–∞—Ç–∫–∏:", reply_markup=cancel_keyboard)

@dp.message(lambda msg: user_states.get(msg.from_user.id, {}).get("state") == "awaiting_title")
async def new_note_step2(message: types.Message):
    user_states[message.from_user.id] = {"state": "awaiting_text", "title": message.text}
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏:", reply_markup=cancel_keyboard)

@dp.message(lambda msg: user_states.get(msg.from_user.id, {}).get("state") == "awaiting_text")
async def new_note_step3(message: types.Message):
    user_id = message.from_user.id
    title = user_states[user_id]["title"]
    save_note(user_id, title, message.text)
    user_states.pop(user_id, None)
    await message.answer(f"–ù–æ—Ç–∞—Ç–∫–∞ '{title}' –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", reply_markup=main_menu)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–∫–∏ ---
@dp.message(F.text == "üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
async def view_notes_step1(message: types.Message):
    notes = get_notes(message.from_user.id)
    if notes:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É:", reply_markup=create_notes_keyboard(notes, "view_note"))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.", reply_markup=main_menu)

@dp.callback_query(F.data.startswith("view_note:"))
async def view_notes_step2(callback: types.CallbackQuery):
    _, _, title = callback.data.partition(":")
    notes = get_notes(callback.from_user.id)
    text = notes.get(title, "–ù–æ—Ç–∞—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    await callback.message.answer(f"üìñ <b>{title}</b>\n\n{text}", reply_markup=main_menu)
    await callback.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ---
@dp.message(F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
async def delete_notes_step1(message: types.Message):
    notes = get_notes(message.from_user.id)
    if notes:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=create_notes_keyboard(notes, "delete_note"))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–æ—Ç–∞—Ç–æ–∫.", reply_markup=main_menu)

@dp.callback_query(F.data.startswith("delete_note:"))
async def delete_notes_step2(callback: types.CallbackQuery):
    _, title = callback.data.split(":", 1)
    delete_note(callback.from_user.id, title)
    await callback.message.edit_text(f"–ù–æ—Ç–∞—Ç–∫–∞ '{title}' –≤–∏–¥–∞–ª–µ–Ω–∞.", reply_markup=None)  # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer("–ù–æ—Ç–∞—Ç–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞!", cache_time=1)  # –î–æ–±–∞–≤–ª—è–µ–º cache_time


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
