import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


from firestore_db import save_note, get_notes, delete_note, update_note
from config import BOT_TOKEN

# –í–∫–ª—é—á–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–æ–≤–∞ –∑–∞–º–µ—Ç–∫–∞")],
        [KeyboardButton(text="üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–µ—Ç–∫—É")],
        [KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–µ—Ç–∫—É")],
        [KeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–µ—Ç–∫—É")]
    ],
    resize_keyboard=True
)

cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ],
    resize_keyboard=True
)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message(lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_action(message: types.Message):
    """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    user_states.pop(message.from_user.id, None)
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu)

def create_notes_keyboard(notes, action):
    """–°—Ç–≤–æ—Ä—é—î InlineKeyboardMarkup –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∑–∞–º—ñ—Ç–æ–∫"""
    keyboard = InlineKeyboardBuilder()
    for title in notes.keys():
        keyboard.button(text=title, callback_data=f"{action}:{title}")
    keyboard.adjust(1)  # –ö–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É
    return keyboard.as_markup()


# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–∞–º—ñ—Ç–∫–∏ ---
@dp.message(lambda message: message.text == "üìù –ù–æ–≤–∞ –∑–∞–º–µ—Ç–∫–∞")
async def new_note_step1(message: types.Message):
    user_states[message.from_user.id] = {"state": "awaiting_title"}
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º—ñ—Ç–∫–∏:", reply_markup=cancel_keyboard)

@dp.message(lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_title")
async def new_note_step2(message: types.Message):
    user_states[message.from_user.id]["title"] = message.text
    user_states[message.from_user.id]["state"] = "awaiting_text"
    await message.answer("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Ç–∫–∏:", reply_markup=cancel_keyboard)

@dp.message(lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_text")
async def new_note_step3(message: types.Message):
    user_id = message.from_user.id
    title = user_states[user_id]["title"]
    text = message.text
    save_note(user_id, title, text)
    user_states.pop(user_id, None)
    await message.answer(f"–ó–∞–º—ñ—Ç–∫–∞ '{title}' –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", reply_markup=main_menu)

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º—ñ—Ç–∫–∏ ---
@dp.message(lambda message: message.text == "üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º—ñ—Ç–∫—É")
async def view_notes_step1(message: types.Message):
    notes = get_notes(message.from_user.id)
    if notes:
        keyboard = create_notes_keyboard(notes, "view_note")
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º—ñ—Ç–∫—É:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º—ñ—Ç–æ–∫.", reply_markup=main_menu)

@dp.callback_query(lambda c: c.data.startswith("view_note:"))
async def view_notes_step2(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    notes = get_notes(user_id)
    
    title = callback.data.split("view_note:")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if title in notes:
        await callback.message.answer(f"üìñ <b>{title}</b>\n\n{notes[title]}", reply_markup=main_menu)
    else:
        await callback.message.answer("–ó–∞–º—ñ—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu)
    
    await callback.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î —Å–ø–ª–∏–≤–∞—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è        

@dp.message(lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_note_view")
async def view_notes_step2(message: types.Message):
    notes = get_notes(message.from_user.id)
    title = message.text
    if title in notes:
        await message.answer(f"üìñ {title}\n\n{notes[title]}", reply_markup=main_menu)
    else:
        await message.answer("–ó–∞–º—ñ—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    user_states.pop(message.from_user.id, None)

# --- –ó–º—ñ–Ω–∞ –∑–∞–º—ñ—Ç–∫–∏ ---
@dp.message(lambda message: message.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–º—ñ—Ç–∫—É")
async def edit_notes_step1(message: types.Message):
    notes = get_notes(message.from_user.id)
    if notes:
        keyboard = create_notes_keyboard(notes, "edit_note")
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º—ñ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º—ñ—Ç–æ–∫.", reply_markup=main_menu)

@dp.callback_query(lambda c: c.data.startswith("edit_note:"))
async def edit_notes_step2(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    title = callback.data.split("edit_note:")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫

    user_states[user_id] = {"state": "awaiting_new_text", "title": title}
    await callback.message.answer(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º—ñ—Ç–∫–∏ '{title}':", reply_markup=cancel_keyboard)
    await callback.answer()

@dp.message(lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_new_text")
async def edit_notes_step3(message: types.Message):
    user_id = message.from_user.id
    title = user_states[user_id]["title"]
    new_text = message.text

    update_note(user_id, title, new_text)
    user_states.pop(user_id, None)

    await message.answer(f"–ó–∞–º—ñ—Ç–∫–∞ '{title}' –æ–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_menu)

@dp.message(lambda message: message.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º—ñ—Ç–∫—É")
async def delete_notes_step1(message: types.Message):
    notes = get_notes(message.from_user.id)
    if notes:
        keyboard = create_notes_keyboard(notes, "delete_note")
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º—ñ—Ç–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º—ñ—Ç–æ–∫.", reply_markup=main_menu)

@dp.callback_query(lambda c: c.data.startswith("delete_note:"))
async def delete_notes_step2(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    title = callback.data.split("delete_note:")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫

    delete_note(user_id, title)
    await callback.message.answer(f"–ó–∞–º—ñ—Ç–∫–∞ '{title}' –≤–∏–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu)
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
